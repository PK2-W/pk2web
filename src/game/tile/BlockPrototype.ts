import { TEXTURE_ID_BLOCKS } from '@game/game/PK2Game';
import { BLOCK_ESTO_ALAS, BLOCK_KYTKIN1, BLOCK_KYTKIN3 } from '@game/map/PK2Map';
import { EBlockProtoCode, BLOCK_RAW_SIZE, BLOCK_SIZE } from '@game/tile/BlockConstants';
import { BlockContext } from '@game/tile/BlockContext';
import { EBlocks } from '@game/tile/DwBlock';
import { PkRectangleImpl } from '@ng/types/pixi/PkRectangleImpl';
import { PkImageTexture } from '@ng/types/PkImageTexture';
import { PkRectangle } from '@ng/types/PkRectangle';
import { CBYTE, bool, int } from '../../support/types';

export class BlockPrototype {
    private _blockContext: BlockContext;
    
    // Type of block
    private _code: TBlockProtoCode;
    
    // Indicates if it's background tile
    private _tausta: boolean;
    // ...facing left
    private _leftIsBarrier: boolean;
    // ...facing right
    private _rightIsBarrier: boolean;
    // ...faceing up
    private _topIsBarrier: boolean;
    // ...facing down
    private bottomIsBarrier: boolean;
    private _vasen: int;
    private _oikea: int;
    private _yla: int;
    private _ala: int;
    protected _vesi: bool;
    
    private _topMask: number[];
    private _bottomMask: number[];
    
    public constructor(proto?: BlockPrototype) {
        this._topMask = new Array(BLOCK_SIZE);
        this._bottomMask = new Array(BLOCK_SIZE);
        
        if (proto != null) {
            for (let k in proto) {
                if (proto.hasOwnProperty(k)) {
                    this[k] = proto[k];
                }
            }
        }
    }
    
    /**
     * Block prototypes are generated by the game itself.<br>
     * This factory takes care of it, returning an iterable structure with the 150 prototypes.
     */
    public static generatePrototypes(ctx: BlockContext): BlockPrototype[] {
        const protoLst: BlockPrototype[] = [];
        
        let proto: BlockPrototype;
        for (let i = 0; i < 150; i++) {
            proto = new BlockPrototype();
            
            proto._blockContext = ctx;
            
            proto._vasen = 0;
            proto._oikea = 0; //32
            proto._yla = 0;
            proto._ala = 0; //32
            
            proto._code = i;
            
            if ((i < 80 || i > 139) && i !== 255) {
                proto._tausta = false;
                
                proto._rightIsBarrier = true;
                proto._leftIsBarrier = true;
                proto._topIsBarrier = true;
                proto.bottomIsBarrier = true;
                
                // Erikoislattiat
                
                if (i > 139) {
                    proto._rightIsBarrier = false;
                    proto._leftIsBarrier = false;
                    proto._topIsBarrier = false;
                    proto.bottomIsBarrier = false;
                }
                
                // L�pik�velt�v� lattia
                
                if (i === BLOCK_ESTO_ALAS) {
                    proto._rightIsBarrier = false;
                    proto._topIsBarrier = false;
                    proto.bottomIsBarrier = true;
                    proto._leftIsBarrier = false;
                    proto._ala -= 27;
                }
                
                // M�et
                
                if (i > 49 && i < 60) {
                    proto._rightIsBarrier = false;
                    proto._topIsBarrier = true;
                    proto.bottomIsBarrier = true;
                    proto._leftIsBarrier = false;
                    proto._ala += 1;
                }
                
                // Kytkimet
                
                if (i >= BLOCK_KYTKIN1 && i <= BLOCK_KYTKIN3) {
                    proto._rightIsBarrier = true;
                    proto._topIsBarrier = true;
                    proto.bottomIsBarrier = true;
                    proto._leftIsBarrier = true;
                }
            } else {
                proto._tausta = true;
                
                proto._rightIsBarrier = false;
                proto._leftIsBarrier = false;
                proto._topIsBarrier = false;
                proto.bottomIsBarrier = false;
            }
            
            proto._vesi = (i > 131 && i < 140);
            
            proto.calculateMask();
            
            protoLst.push(proto);
        }
        
        return protoLst;
    }
    
    // TODO: Cachear rectangulos
    public getTextureArea(frame: number = 0): PkRectangle {
        return PkRectangleImpl.$(
            ((this._code + frame) % 10) * BLOCK_RAW_SIZE,
            Math.floor((this._code + frame) / 10) * BLOCK_RAW_SIZE,
            BLOCK_RAW_SIZE,
            BLOCK_RAW_SIZE);
    }
    
    /**
     * SDL: PK_Palikka_Tee_Maskit.
     */
    private calculateMask(): void {
        const px = this.getDefaultTexture().getPixels();
        
        let x, y;
        
        for (x = 0; x < BLOCK_SIZE; x++) {
            y = 0;
            while (y < BLOCK_SIZE - 1 && px.get(x, y).a === 0)  //(color = buffer[x + (mask % 10) * 32 + (y + (mask / 10) * 32) * leveys]) == 255)
                y++;
            
            this._bottomMask[x] = y;
        }
        
        for (x = 0; x < BLOCK_SIZE; x++) {
            y = BLOCK_SIZE - 1;
            while (y >= 0 && px.get(x, y).a === 0) //(color = buffer[x + (mask % 10) * 32 + (y + (mask / 10) * 32) * leveys]) == 255)
                y--;
            
            this._topMask[x] = BLOCK_SIZE - 1 - y;
        }
    }
    
    public getDefaultTexture(): PkImageTexture {
        return this._blockContext.textureCache.getTexture(TEXTURE_ID_BLOCKS, this.getTextureArea());
    }
    
    public get tausta(): boolean { return this._tausta; }
    
    public isWater(): boolean {
        return this._vesi === true;
    }
    
    
    ///  Accessors  ///
    
    public get code(): TBlockProtoCode {
        return this._code;
    }
    
    public get top(): number { return this._yla; }
    public get right(): number { return this._oikea; }
    public get bottom(): number { return this._ala; }
    public get left(): number { return this._vasen; }
    
    public get toTheTop(): boolean { return this._topIsBarrier; }
    public get toTheRight(): boolean { return this._rightIsBarrier; }
    public get toTheBottom(): boolean { return this.bottomIsBarrier; }
    public get toTheLeft(): boolean { return this._leftIsBarrier; }
    
    /** @deprecated */ public get vasemmalle(): EBlocks { return this._leftIsBarrier ? EBlocks.BLOCK_SEINA : EBlocks.BLOCK_TAUSTA; };
    /** @deprecated */ public get oikealle(): EBlocks { return this._rightIsBarrier ? EBlocks.BLOCK_SEINA : EBlocks.BLOCK_TAUSTA; };
    /** @deprecated */ public get ylos(): EBlocks { return this._topIsBarrier ? EBlocks.BLOCK_SEINA : EBlocks.BLOCK_TAUSTA; };
    /** @deprecated */ public get alas(): EBlocks { return this.bottomIsBarrier ? EBlocks.BLOCK_SEINA : EBlocks.BLOCK_TAUSTA; };
    
    public get topMask(): number[] { return this._topMask; }
    public get bottomMask(): number[] { return this._bottomMask; }
}

export type TBlockProtoCode = EBlockProtoCode | CBYTE;
